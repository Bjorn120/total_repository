@page "/dettagliocorso/{Id:int}"

@using BlazorAppFITSTIC.Data
@using BlazorAppFITSTIC.Repository
@using System.Linq
@inject CourseService cs
@inject TeacherService ts

<h3>Dettaglio Corso</h3>

<div class="alert alert-danger @(showError ? "d-block" : "d-none")">
    <p>
        Errore: studente non trovato.
    </p>
</div>

<div class="alert alert-success @(salva? "d-block" : "d-none")">
    <p>
        Elemento modificato con SUCCESSO.
    </p>
</div>

<div class="row">
    <div class="col">
        @if (c != null)
        {
            <label>Id</label>
            <span class="ml-2">@c.Id</span>
            <br />
            <label>Data inserimento</label>
            <span class="ml-2">@c.Inserimento.ToString()</span>
            <br />
            <label>Nome</label>
            <input type="text" @bind-value="c.Nome" class="form-control" />

            <label>Descrizione</label>
            <input type="text" @bind-value="c.Descrizione" class="form-control" />

            <label>Materia</label>
            <input type="text" @bind-value="c.Materia" class="form-control" />

            <label>Data di Inizio</label>
            <input type="date" @bind-value="c.Inizio" class="form-control" />

            <label>Data di Fine</label>
            <input type="date" @bind-value="c.Fine" class="form-control" />

            @if (ltAvaible.Count == 0)
            {
                <label>Assegna Docente</label>
                <div class="row">
                    <div class=" col">
                        <select class="form-control" @bind-value="selectID" @bind-value:event="onchange">
                            <option value="-1">Seleziona un docente</option>
                            @foreach (Teacher t in ltc)
                            {
                                <option value="@t.Id">@t.Cognome</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <span class="oi oi-plus " @onclick="AddTeacherOnList"></span>
                    </div>
                </div>
            }


            <button class="btn btn-outline-primary" @onclick="SaveCourse">Salva</button>
        }
    </div>
    <div class="col">
        @if (ltAvaible.Count != 0)
        {
            <label>Docente</label>
            <ul>
                @foreach (Teacher t in ltAvaible)
                {
                <li>
                    @t.Cognome
                    <span class="oi oi-circle-x" @onclick="_ => Delete_teacher(t)"></span>
                </li>
                }
            </ul>
        }
        else
        {
            <p>Docente non Assegnato</p>
        }


    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    bool aggiungi = false;
    bool salva = false;
    bool showError = false;
    int selectID = -1;
    int i;
    private Course c;
    private Teacher t;
    private List<Course> lc;
    private List<Teacher> lt;
    private List<Teacher> ltAvaible = new List<Teacher>();
    private List<Teacher> ltc = new List<Teacher>();

    protected override async Task OnInitializedAsync()
    {

        lc = await cs.GetCourses();
        c = lc.FirstOrDefault(st => st.Id == Id);
        if (c == null)
        {
            showError = true;
        }
        else
        {
            lt = await ts.GetTeachers();
            ltAvaible = lt.Where(x => x.Corsi.Contains(c)).ToList();
            ltc = lt.Except(ltAvaible).ToList();
        }
    }

    async Task SaveCourse()
    {
        await cs.UpdateCourse(c);
        await ts.UpdateTeacher(t);
        salva = true;
    }

    public void AddTeacherOnList()
    {
        t = lt.Find(t => t.Id == selectID);

        c.Docente = t;
        ltAvaible.Add(t);
        ltc.Remove(t);
        if(!t.Corsi.Contains(c))
        {
            t.Corsi.Add(c);
        }

        selectID = -1;
        aggiungi = false;
    }
    public void Delete_teacher(Teacher t)
    {
        ltAvaible.Remove(t);
        ltc.Add(t);
        c.Docente = null;
        t.Corsi.Remove(c);
    }
}
